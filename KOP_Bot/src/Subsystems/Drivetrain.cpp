// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drivetrain.h"
#include "../RobotMap.h"
#include "cmath"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Driving.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	aMotor = RobotMap::drivetrainCANTalon1;
	bMotor = RobotMap::drivetrainCANTalon2;
	cMotor = RobotMap::drivetrainCANTalon3;
	dMotor = RobotMap::drivetrainCANTalon4;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drivetrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new Driving());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Drivetrain::DriveForwardJoystick(Joystick* joy){

		/*Attempt at smooth motion below
		 * Number 1 problem: abs is only returning int values
		 * so the if statement always outputs false.
		*/
	float absign, cdsign;

	if(aMotor->Get()==0){
		absign = 0.5;
	}
	else {absign = abs(aMotor->Get())/aMotor->Get();}

	if(cMotor->Get()==0){
		cdsign = 0.5;
	}
	else {cdsign = abs(cMotor->Get())/cMotor->Get();}

	if(std::abs(abs(joy->GetY()+.25*joy->GetZ())-abs(aMotor->Get())) > .00001){
		aMotor->Set(aMotor->Get()+absign*.00001);}
	else {
		aMotor->Set(joy->GetY()+.25*joy->GetZ());}
	if(abs(abs(joy->GetY()+.25*joy->GetZ())-abs(bMotor->Get())) > .00001){
		bMotor->Set(bMotor->Get()+absign*.00001);}
	else {
		bMotor->Set(joy->GetY()+.25*joy->GetZ());}
	if(abs(abs(joy->GetY()+.25*joy->GetZ())-abs(cMotor->Get())) > .00001){
		cMotor->Set(cMotor->Get()+cdsign*.00001);}
	else {
		cMotor->Set(-1*joy->GetY()+.25*joy->GetZ());}
	if(abs(abs(joy->GetY()+.25*joy->GetZ())-abs(dMotor->Get())) > .00001){
		dMotor->Set(dMotor->Get()+cdsign*.00001);}
	else {
		dMotor->Set(-1*joy->GetY()+.25*joy->GetZ());}

	}

// Put methods for controlling this subsystem
// here. Call these from Commands.

